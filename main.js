(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>a});var o=n(354),r=n.n(o),i=n(314),c=n.n(i)()(r());c.push([e.id,"body {\n    height: 100vh;\n    width: 100vw;\n    padding: 0px;\n    margin: 0px;\n    display: grid;\n    grid-template: 1fr 5fr / 1fr 7fr;\n}\n\n.title {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n    justify-self: center;\n    font-size: 100px;\n}\n\n.navbar {\n    display: flex;\n    flex-direction: column;\n    grid-row: 2 / 3;\n    grid-column: 1 / 2;\n    border: 1px solid black;\n    border-right: none;\n}\n\n.navbar > button{\n    border-style: none;\n}\n\n#projectHeader {\n    display: flex;\n    flex-direction: column;\n    font-size: 20px;\n}\n\n#projectHeader > div {\n    align-self: center;\n}\n\n.content {\n    grid-row: 2 / 3;\n    grid-column: 2 / 3;\n    border: 1px solid black;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,eAAe;IACf,kBAAkB;IAClB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,uBAAuB;AAC3B",sourcesContent:["body {\n    height: 100vh;\n    width: 100vw;\n    padding: 0px;\n    margin: 0px;\n    display: grid;\n    grid-template: 1fr 5fr / 1fr 7fr;\n}\n\n.title {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n    justify-self: center;\n    font-size: 100px;\n}\n\n.navbar {\n    display: flex;\n    flex-direction: column;\n    grid-row: 2 / 3;\n    grid-column: 1 / 2;\n    border: 1px solid black;\n    border-right: none;\n}\n\n.navbar > button{\n    border-style: none;\n}\n\n#projectHeader {\n    display: flex;\n    flex-direction: column;\n    font-size: 20px;\n}\n\n#projectHeader > div {\n    align-self: center;\n}\n\n.content {\n    grid-row: 2 / 3;\n    grid-column: 2 / 3;\n    border: 1px solid black;\n}"],sourceRoot:""}]);const a=c},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(c[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);o&&c[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},c=[],a=0;a<e.length;a++){var l=e[a],d=o.base?l[0]+o.base:l[0],s=i[d]||0,u="".concat(d," ").concat(s);i[d]=s+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var f=r(m,o);o.byIndex=a,t.splice(a,0,{identifier:u,updater:f,references:1})}c.push(u)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<i.length;c++){var a=n(i[c]);t[a].references--}for(var l=o(e,r),d=0;d<i.length;d++){var s=n(i[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(72),t=n.n(e),o=n(825),r=n.n(o),i=n(659),c=n.n(i),a=n(56),l=n.n(a),d=n(540),s=n.n(d),u=n(113),p=n.n(u),m=n(208),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=c().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=s(),t()(m.A,f),m.A&&m.A.locals&&m.A.locals;let A={};const g=(e,t)=>{delete A[e][t],localStorage.setItem("projectLibraryStorage",JSON.stringify(A))},y=(e,t,n,o,r,i)=>{A[e][t].title=n,A[e][t].description=o,A[e][t].dueDate=r,A[e][t].priority=i,localStorage.setItem("projectLibraryStorage",JSON.stringify(A))};function v(e){return function(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}(e,Date.now())}function h(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function b(e){const t=h(e);return t.setHours(0,0,0,0),t}function I(e){return t=e,n=v(e),+b(t)==+b(n);var t,n}let B={};function E(){return B}function C(e,t){const n=E(),o=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=h(e),i=r.getDay(),c=(i<o?7:0)+i-o;return r.setDate(r.getDate()-c),r.setHours(0,0,0,0),r}function k(e,t){return function(e,t,n){return+C(e,n)==+C(t,n)}(e,v(e),t)}const x=document.getElementById("newProject"),D=document.getElementById("projectHeader"),S=document.getElementById("projectName"),w=document.getElementById("projectDialog"),j=document.getElementById("projectForm"),L=document.getElementById("projectSubmit"),N=document.getElementById("noteContainer"),O=document.getElementById("noteInstance"),H=document.getElementById("noteDialog"),T=document.getElementById("noteForm"),M=document.getElementById("noteTitle"),P=document.getElementById("noteDescription"),J=document.getElementById("noteDueDate"),$=(document.getElementById("highPriority"),document.getElementById("noteSubmit")),F=document.getElementById("editDialog"),R=(document.getElementById("editForm"),document.getElementById("editTitle")),q=document.getElementById("editDescription"),z=document.getElementById("editDueDate"),U=(document.getElementById("editHighPriority"),document.getElementById("editSubmit")),Y=document.getElementById("all"),W=document.getElementById("today"),X=document.getElementById("thisWeek"),Z=document.getElementById("completed"),_=document.querySelectorAll("#cancel");let G="",K="";const Q=function(){const e=document.createElement("button");e.classList.add("newNoteBtn"),$.addEventListener("click",(function(){if(""==M.value)return void alert("Please input a title");if(A[G][M.value])return void alert("Cannot repeat title, please choose another title.");const e=function(e,t,n,o){const r={title:e,description:t,dueDate:n,priority:o,completion:"Not done"};return{noteAdder:t=>{A[t][e]=r,localStorage.setItem("projectLibraryStorage",JSON.stringify(A))}}}(M.value,P.value,J.value,document.querySelector("input[name = priority]:checked").value);K=M.value,e.noteAdder(G),t(M.value)}));const t=e=>{let t=G,n=K;const o=document.createElement("div");o.classList.add("titleContainer"),O.appendChild(o);const r=document.createElement("input");r.setAttribute("type","checkbox"),r.setAttribute("value","done"),r.addEventListener("change",(function(){G=t,K=n,1==r.checked?(A[G][K].completion="Done",i.setAttribute("completion","Done")):(A[G][K].completion="Not done",i.setAttribute("completion","Not Done")),localStorage.setItem("projectLibraryStorage",JSON.stringify(A))})),o.appendChild(r),"Done"==A[G][K].completion&&(r.checked=!0);const i=document.createElement("div");i.classList.add("titleDisplay"),i.setAttribute("id",`${K}`),i.setAttribute("completion",`${A[G][K].completion}`),i.setAttribute("priority",`${A[G][K].priority}`),i.textContent=A[G][e].title,o.appendChild(i);const c=document.createElement("button");c.classList.add("editBtn"),c.textContent="Edit",o.appendChild(c),c.addEventListener("click",(function(){G=t,K=n,R.value=A[G][K].title,q.value=A[G][K].description,z.value=A[G][K].dueDate,"high"==A[G][K].priority?document.getElementById("editHigh").checked=!0:document.getElementById("editNormal").checked=!0,F.open=!0})),U.addEventListener("click",(function(){""!=R.value?(y(G,K,R.value,q.value,z.value,document.querySelector("input[name = editPriority]:checked").value),document.getElementById(`${K}`).textContent=R.value,i.setAttribute("priority",`${A[G][K].priority}`)):alert("Please input a title")}));const a=document.createElement("button");a.addEventListener("click",(function(){G=t,K=n,g(G,K),o.remove()})),a.classList.add("deleteBtn"),a.textContent="Delete",o.appendChild(a)};return{clearDisplay:function(){O.innerHTML=""},showNote:t,newNoteBtnAppend:()=>{e.textContent="+",e.addEventListener("click",(function(){H.open=!0,T.reset()})),N.appendChild(O),N.appendChild(e)}}}();!function(){let e=JSON.parse(localStorage.getItem("projectLibraryStorage"));if(console.log(e),0!==Object.keys(e).length){A=e;for(const e in A){const t=document.createElement("div");D.insertBefore(t,x),o(e,t),n(e,t)}r()}else console.log("Nothing!");function t(e){e.preventDefault(),w.close()}function n(e,t){const n=document.createElement("button");n.textContent="X",n.classList.add("projectDeleteBtn"),n.addEventListener("click",(function(){(function(e){delete A[e],localStorage.setItem("projectLibraryStorage",JSON.stringify(A))})(e),t.remove()})),t.appendChild(n)}function o(e,t){const n=document.createElement("button");n.textContent=`${e}`,n.setAttribute("id",e),n.addEventListener("click",(function(){G=e,Q.clearDisplay(),Q.newNoteBtnAppend();for(const t in A[e])K=t,Q.showNote(t)})),t.appendChild(n)}function r(){Q.clearDisplay();for(const e in A){G=e;for(const t in A[e])K=t,Q.showNote(t)}}x.addEventListener("click",(function(){w.open=!0,j.reset()})),L.addEventListener("click",(function(){if(""==S.value)return;if(A[S.value])return void alert("Cannot repeat project name, please choose another name.");const e=document.createElement("div");var t;D.insertBefore(e,x),t=S.value,A[t]={},localStorage.setItem("projectLibraryStorage",JSON.stringify(A)),o(S.value,e),n(S.value,e)})),Y.addEventListener("click",r),W.addEventListener("click",(function(){Q.clearDisplay();for(const e in A){G=e;for(const t in A[e])1==I(new Date(A[e][t].dueDate))&&(K=t,Q.showNote(t))}})),X.addEventListener("click",(function(){Q.clearDisplay();for(const e in A){G=e;for(const t in A[e])1==k(new Date(A[e][t].dueDate))&&(K=t,Q.showNote(t))}})),Z.addEventListener("click",(function(){Q.clearDisplay();for(const e in A){G=e;for(const t in A[e])"Done"==A[e][t].completion&&(K=t,Q.showNote(t))}})),_.forEach((e=>e.onclick=()=>t))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,